from pyspark.sql import SparkSession
import pandas as pd
import numpy as np
from numpy import mean
from tqdm import tqdm


def cos_sim(vector_a, vector_b):
    """
    计算两个向量之间的余弦相似度
    :param vector_a: 向量 a
    :param vector_b: 向量 b
    :return: sim
    """
    vector_a = vector_a.values
    vector_b = vector_b.values
    vector_a = np.mat(vector_a)
    vector_b = np.mat(vector_b)
    num = float(vector_a * vector_b.T)
    denom = np.linalg.norm(vector_a) * np.linalg.norm(vector_b)
    cos = num / denom
    # sim = 0.5 + 0.5 * cos
    return cos


def rmse(predictions, targets):
    result = np.sqrt(((np.array(predictions) - np.array(targets)) ** 2).mean())
    return result


spark = SparkSession.builder.appName('itemcf').getOrCreate()  # project name

#read ratings
ratings = spark.read.csv('ml-25m/ratings.csv', inferSchema=True, header=True)
ratings.createOrReplaceTempView("ratings")
spark.sql("select count(userId) as num from ratings").show()
ratings_s = spark.sql("select * from ratings limit 15000")
te = ratings_s
te_df = ratings_s.toPandas()
# (te, ho) = ratings.randomSplit([0.0001, 0.9999])
te.createOrReplaceTempView("te")
user = spark.sql("select distinct userid from te")
movies = spark.sql("select distinct movieid from te")
tedf = te.toPandas()
# user = tedf['userId'].values.tolist()
# movies = tedf['movieId'].values.tolist()
# rating = tedf['movieId'].values.tolist()
# tedf_new = tedf.set_index("userId")
# tedf_new = tedf_new.set_index("movieId").columns
# tedf_new.show()
user = user.toPandas()
movies = movies.toPandas()
# print(len(movies))
user = user['userid'].values.tolist()
movies = movies['movieid'].values.tolist()
# data = pd.DataFrame(columns=movies, index=user)
# data.reset_index(level=0, inplace=True)
# # for i in range(2495)
test_p = te_df.drop(['timestamp'], axis=1)
test = pd.pivot_table(test_p, index=['userId'], columns=['movieId'], values=['rating'])
test.columns = movies
df = test.replace(np.nan, 0)
training = df.sample(frac=0.8)
testing = df[~df.index.isin(training.index)]
matrix = pd.DataFrame(columns=movies, index=movies)
n = 0
# for j in range(1856):
#     for i in range(n, 1856, 1):
#         matrix[j,i] = cos_sim(df[movies[j]], df[movies[i]])
#     n = n+1
#     print(j)
for j in tqdm(range(len(movies))):
    for i in range(n, len(movies), 1):
        matrix.loc[movies[j], movies[i]] = cos_sim(training[movies[j]], training[movies[i]])
        # print(cos_sim(df[movies[j]], df[movies[i]]))
    n = n+1
matrix = matrix.replace(np.nan, 0)
testing_r = testing.reset_index().drop(['userId'], axis=1)
matrix_r = matrix.reset_index()

# a = testing_r.iloc[0].tolist()
# b = matrix_r.iloc[0,1::].tolist()
# c = [i * a[0] for i in b]
# rmse(c,a)
rmse_list = []
for i in range(len(testing_r.index)):
    a = testing_r.iloc[i].tolist()
    for j in range(len(a)):
        if a[j] != 0:
            print(j)
            break
        else:
            continue
    b = matrix_r.iloc[j, 1::].tolist()
    c = [i * a[0] for i in b]
    rmse_r = rmse(c, a)
    rmse_list.append(rmse_r)
avg_rmse = mean(rmse_list)
