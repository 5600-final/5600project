from pyspark.sql import SparkSession
from pyspark.sql.functions import when, count, col
from pyspark.sql.functions import *
import pandas as pd
from copy import deepcopy
import numpy as np


def split_col(data, column):
    '''拆分成列

    :param data: 原始数据
    :param column: 拆分的列名
    :type data: pandas.core.frame.DataFrame
    :type column: str
    '''
    data = deepcopy(data)
    max_len = max(list(map(len, data[column].values)))  # 最大长度
    new_col = data[column].apply(lambda x: x + [None]*(max_len - len(x)))  # 补空值，None可换成np.nan
    new_col = np.array(new_col.tolist()).T  # 转置
    for i, j in enumerate(new_col):
        data[column + str(i)] = j
    return data


spark = SparkSession.builder.appName('5600final').getOrCreate()

#read genome-scores
genome_scores = spark.read.csv('ml-25m/genome-scores.csv', inferSchema=True, header=True)
genome_scores.createOrReplaceTempView("genome_scores")

#read genome-tags
genome_tags = spark.read.csv('ml-25m/genome-tags.csv', inferSchema=True, header=True)
genome_tags.createOrReplaceTempView("genome_tags")

#read links
links = spark.read.csv('ml-25m/links.csv', inferSchema=True, header=True)
links.createOrReplaceTempView("links")

#read movies
movies = spark.read.csv('ml-25m/movies.csv', inferSchema=True, header=True)
movies.createOrReplaceTempView("movies")

#read ratings
ratings = spark.read.csv('ml-25m/ratings.csv', inferSchema=True, header=True)
ratings.createOrReplaceTempView("ratings")

#read tags
tags = spark.read.csv('ml-25m/tags.csv', inferSchema=True, header=True)
tags.createOrReplaceTempView("tags")

#null detection
na_report_gt = genome_tags.select([count(when(isnull(c), c)).alias(c) for c in genome_tags.columns])
na_report_gt.show()
na_report_gs = genome_scores.select([count(when(isnull(c), c)).alias(c) for c in genome_scores.columns])
na_report_gs.show()
na_report_l = links.select([count(when(isnull(c), c)).alias(c) for c in links.columns])
na_report_l.show()  #imdbID has 107 null, seems that not an important loss base on the document
na_report_m = movies.select([count(when(isnull(c), c)).alias(c) for c in movies.columns])
na_report_m.show()
na_report_r = ratings.select([count(when(isnull(c), c)).alias(c) for c in ratings.columns])
na_report_r.show()
na_report_t = tags.select([count(when(isnull(c), c)).alias(c) for c in tags.columns])
na_report_t.show()

genome_scores.describe().show()
genome_tags.describe().show()
links.describe().show()
movies.describe().show()
ratings.describe().show()
tags.describe().show()

ratings.show()
moviesdf = movies.toPandas()
moviesdf['genres'] = moviesdf['genres'].str.split(pat="|")
# data_split = movies.withColumn("s", split(movies['genres'], pattern="|"))
# ds = data_split.toPandas()

a = moviesdf['genres'].values.tolist()

# for j in range(0, 62423, 1):
#     for i in range(0, 6, 1):
#         # moviesdf['genres' + str(i)] = moviesdf['genres'].map(lambda X: X.split('|')[i])
#         # print(moviesdf['genres'].iloc[j])
#         try:
#             moviesdf['genres' + str(i)] = moviesdf['genres'].map(lambda X: X.split('|')[i])
#         except IndexError:
#             moviesdf['genres' + str(i)].iloc[j] = 0
#         else:
#             moviesdf['genres' + str(i)] = moviesdf['genres'].map(lambda X: X.split('|')[i]).iloc[j]

# for j in range(0, 62423, 1):
#     for i in range(0, 6, 1):
#         moviesdf['genres' + str(i)] = moviesdf['genres'].map(lambda X: X.split('|')[i])
        # print(moviesdf['genres'].iloc[j])
        # try:
        #     moviesdf['genres' + str(i)] =0
        #     moviesdf['genres' + str(i)] = moviesdf['genres'].map(lambda X: X.split('|')[i])
        # except IndexError:
        #     moviesdf['genres' + str(i)].iloc[j] = 0
        # else:
        #     moviesdf['genres' + str(i)].iloc[j] = moviesdf['genres'].map(lambda X: X.split('|')[i]).iloc[j]

# moviesdf['genres' + str(0)] = moviesdf['genres'].map(lambda X: X.split('|')[0])
# test = moviesdf['genres'].map(lambda X: X.split('|'))
# test1 = moviesdf['genres'].map(lambda X: X.split('|')[0])

genome_tagsdf = genome_tags.toPandas()
b = genome_tagsdf['tag'].tolist()
for i in range(len(b)):
    moviesdf[b[i].title()] = 0
movies_col = moviesdf.columns.values.tolist()
moviesdf.iloc[1][1130]
print(moviesdf.index)
movies_col[3]
for i in range(3,1130,1):
    for j in range(0,62423,1):
        print(i)
        if movies_col[i] in moviesdf.iloc[j][2]:
            moviesdf.iloc[j, i] = 1
        else:
            pass
# moviesdf.describe()

# for i in range(31,32,1):
#     for j in range(0,62423,1):
#         print(i)
#         if movies_col[i] in moviesdf.iloc[j][2]:
#             moviesdf.iloc[j, i] = 1
#         else:
#             pass
# moviesdf.describe()
# moviesdf.iloc[3, 3] = '1'
# str(movies_col[3])
# movies_col[31]
# moviesdf.iloc[0, 31]
# movies_col[31] in moviesdf.iloc[0][2]
